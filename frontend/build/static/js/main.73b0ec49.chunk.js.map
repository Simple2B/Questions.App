{"version":3,"sources":["socket.ts","App.tsx","hooks/useExitPrompt.ts","index.tsx"],"names":["questions_ws","io","App","useState","socket","question","setQuestion","useEffect","on","send","id","resp","console","log","emit","handler","handlerRef","useRef","current","handleBeforeunload","evt","returnValue","defaultPrevented","window","addEventListener","removeEventListener","useBeforeunload","event","preventDefault","onbeforeunload","onClick","type","placeholder","value","onChange","e","target","session","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAEaA,EAAeC,aAAG,c,WCGlBC,EAAM,WACjB,MAA4BC,mBAAiBH,GAA7C,mBAAOI,EAAP,KACA,GADA,KACgCD,mBAAS,KAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KAyDA,OA5CAC,qBAAU,WACRH,EAAOI,GAAG,WAAW,WACnBJ,EAAOK,KAAP,eAAoBL,EAAOM,GAA3B,sBAGFN,EAAOI,GAAG,4BAA4B,SAACG,GACrCC,QAAQC,IAAIF,MAGdP,EAAOI,GAAG,2BAA2B,SAACG,GACpCP,EAAOU,KAAK,wBACZF,QAAQC,IAAIF,QAiBb,ICdE,SAAyBI,GAC9B,IAAMC,EAAaC,iBAAOF,GAE1BR,qBAAU,WACRS,EAAWE,QAAUH,IACpB,CAACA,IAEJR,qBAAU,WACR,IAAMY,EAA0C,SAACC,GAC/C,IAAIC,EAUJ,GARkC,oBAAvBL,EAAWE,UACpBG,EAAcL,EAAWE,QAAQE,IAG/BA,EAAIE,mBACNF,EAAIC,YAAc,IAGO,kBAAhBA,EAET,OADAD,EAAIC,YAAcA,EACXA,GAMX,OAFAE,OAAOC,iBAAiB,eAAgBL,GAEjC,WACLI,OAAOE,oBAAoB,eAAgBN,MAE5C,IDXHO,EAAgB,SAACC,GACfA,EAAMC,oBAGRrB,qBAAU,WAIR,OAHAgB,OAAOM,eAAiB,WACtB,OAAO,GAEF,eACN,IAGD,gCACE,wBAAQC,QAzDe,WACzB1B,EAAOU,KAAK,yBAwDV,+BADF,IACkE,uBAChE,uBACEiB,KAAK,OACLrB,GAAG,WACHsB,YAAY,wBACZC,MAAO5B,EACP6B,SAAU,SAACC,GACT7B,EAAY6B,EAAEC,OAAOH,UAGzB,uBACA,wBAAQH,QAjEiB,WAC3B,IAAMnB,EAAO,CACX0B,QAASjC,EAAOM,GAChBL,SAAUA,GAERA,GAAUD,EAAOU,KAAK,kBAAmBH,IA4D3C,8BExEN2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.73b0ec49.chunk.js","sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport const questions_ws = io(\"/questions\");\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { questions_ws } from \"./socket\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { useBeforeunload } from \"./hooks/useExitPrompt\";\r\n\r\nexport const App = () => {\r\n  const [socket, setSocket] = useState<Socket>(questions_ws);\r\n  const [question, setQuestion] = useState(\"\");\r\n\r\n  const handleGetQuestions = () => {\r\n    socket.emit(\"get_active_questions\");\r\n  };\r\n  const handleCreateQuestion = () => {\r\n    const resp = {\r\n      session: socket.id,\r\n      question: question,\r\n    };\r\n    if (question) socket.emit(\"create_question\", resp);\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"connect\", () => {\r\n      socket.send(`User ${socket.id} has connected`);\r\n    });\r\n\r\n    socket.on(\"success_active_questions\", (resp) => {\r\n      console.log(resp);\r\n    });\r\n\r\n    socket.on(\"question_create_success\", (resp) => {\r\n      socket.emit(\"get_active_questions\");\r\n      console.log(resp);\r\n    });\r\n    // return () => {\r\n\r\n    //   console.log(\"before \");\r\n    //   alert(\"componentWillUnmount\");\r\n    //   const client_data = {\r\n    //     session: socket.id,\r\n    //     message: \"disconnected successfully\",\r\n    //   };\r\n    //   socket.emit(\"leave_service\", client_data);\r\n    //   socket.disconnect();\r\n    //   alert(\"componentWillUnmount\");\r\n    // };\r\n    // return () => {\r\n    //   window.removeEventListener(\"beforeunload\", alertUser);\r\n    // };\r\n  }, []);\r\n\r\n  // useBeforeunload((event) => {\r\n  //   if (socket) event.preventDefault();\r\n  // });\r\n  useBeforeunload((event) => {\r\n    event.preventDefault();\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.onbeforeunload = function () {\r\n      return false;\r\n    };\r\n    return () => {};\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleGetQuestions}>Get all questions</button> <br />\r\n      <input\r\n        type=\"text\"\r\n        id=\"question\"\r\n        placeholder=\"Type in your question\"\r\n        value={question}\r\n        onChange={(e) => {\r\n          setQuestion(e.target.value);\r\n        }}\r\n      />\r\n      <br />\r\n      <button onClick={handleCreateQuestion}>Add question</button>\r\n    </div>\r\n  );\r\n};\r\n","// import { useState, useEffect } from \"react\";\r\n\r\n// const initBeforeUnLoad = (showExitPrompt:boolean) => {\r\n//   window.onbeforeunload = (event:Event) => {\r\n//     if (showExitPrompt) {\r\n//       const e = event || window.event;\r\n//       e.preventDefault();\r\n//       if (e) {\r\n//         e.returnValue = \"\";\r\n//       }\r\n//       return \"\";\r\n//     }\r\n//   };\r\n// };\r\n\r\n// // Hook\r\n// export default function useExitPrompt(bool:boolean) {\r\n//   const [showExitPrompt, setShowExitPrompt] = useState(bool);\r\n\r\n//   window.onload = function () {\r\n//     initBeforeUnLoad(showExitPrompt);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     initBeforeUnLoad(showExitPrompt);\r\n//   }, [showExitPrompt]);\r\n\r\n//   return [showExitPrompt, setShowExitPrompt];\r\n// }\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\ntype BeforeunloadHandler = (evt: BeforeUnloadEvent) => void;\r\n\r\nexport function useBeforeunload(handler: BeforeunloadHandler) {\r\n  const handlerRef = useRef(handler);\r\n\r\n  useEffect(() => {\r\n    handlerRef.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeunload: BeforeunloadHandler = (evt) => {\r\n      let returnValue;\r\n\r\n      if (typeof handlerRef.current === \"function\") {\r\n        returnValue = handlerRef.current(evt);\r\n      }\r\n\r\n      if (evt.defaultPrevented) {\r\n        evt.returnValue = \"\";\r\n      }\r\n\r\n      if (typeof returnValue === \"string\") {\r\n        evt.returnValue = returnValue;\r\n        return returnValue;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"beforeunload\", handleBeforeunload);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeunload);\r\n    };\r\n  }, []);\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}