{"version":3,"sources":["socket.ts","components/asker/AskerQuestion.tsx","components/asker/Asker.tsx","components/answerer/AnswerForm.tsx","components/answerer/Answerer.tsx","App.tsx","hooks/useExitPrompt.ts","index.tsx"],"names":["questions_ws","io","AskerQuestion","question","useState","showAnswers","setShowAnswers","styles","answerComponents","answers_list","map","a","className","answerer_id","answer_text","onClick","prev","question_text","length","Asker","setQuestion","activeQuestions","setActiveQuestions","question_components","useEffect","on","resp","emit","status","data","onSubmit","e","preventDefault","session","id","handleCreateQuestion","value","onChange","target","AnswererForm","setStatus","answerText","setAnswerText","answerBtnStyles","answerFormStyles","moment","created_at","fromNow","placeholder","answer","question_id","alert","Answerer","send","console","log","App","page","setPage","handler","handlerRef","useRef","current","handleBeforeunload","evt","returnValue","defaultPrevented","window","addEventListener","removeEventListener","useBeforeunload","event","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2043aa2.chunk.js","sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nexport const questions_ws = io(\"/questions\");\r\nexport const answers_ws = io(\"/answers\");\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { IAnswer } from \"../../types/answerTypes\";\r\nimport { IQuestion } from \"../../types/questionTypes\";\r\n\r\ninterface IAskerQuestionProps {\r\n  question: IQuestion;\r\n}\r\n\r\nexport const AskerQuestion: React.FC<IAskerQuestionProps> = ({ question }) => {\r\n  const [showAnswers, setShowAnswers] = useState(false);\r\n  const styles = showAnswers\r\n    ? \"asker__answers asker__answers_active\"\r\n    : \"asker__answers\";\r\n  const answerComponents = question.answers_list.map((a) => {\r\n    return (\r\n      <div className=\"answers_info\">\r\n        <div className=\"answers_author\">Author {a.answerer_id}:</div>\r\n        <div className=\"answers_text\">{a.answer_text}</div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"asker_question\"\r\n        onClick={() => {\r\n          setShowAnswers((prev) => !prev);\r\n        }}\r\n      >\r\n        <p className=\"asker_question-header\">{question.question_text}</p>\r\n        <p className=\"asker_question-amount\">{question.answers_list.length}</p>\r\n      </div>\r\n      <div className={styles}>{answerComponents}</div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { questions_ws } from \"../../socket\";\r\nimport { IQuestion } from \"../../types/questionTypes\";\r\nimport { IAnswer } from \"../../types/answerTypes\";\r\nimport \"./asker.css\";\r\nimport { AskerQuestion } from \"./AskerQuestion\";\r\n\r\ninterface IResponse {\r\n  status: string;\r\n  message: string;\r\n  data: IQuestion[];\r\n}\r\nexport const Asker = () => {\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [activeQuestions, setActiveQuestions] = useState<IQuestion[]>([]);\r\n\r\n  const handleCreateQuestion = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const resp = {\r\n      session: questions_ws.id,\r\n      question: question,\r\n    };\r\n    if (question) questions_ws.emit(\"create_question\", resp);\r\n  };\r\n\r\n  const question_components = activeQuestions.map((question) => (\r\n    <AskerQuestion question={question} />\r\n  ));\r\n\r\n  useEffect(() => {\r\n    questions_ws.on(\"create_question_success\", (resp) => {\r\n      questions_ws.emit(\"get_questions_by_session_id\");\r\n    });\r\n\r\n    questions_ws.on(\"no_active_questions\", (resp) => {\r\n      setActiveQuestions([]);\r\n    });\r\n    questions_ws.on(\"success_get_questions_by_session_id\", (resp) => {\r\n      if (resp.status === \"success\") {\r\n        setActiveQuestions(resp.data);\r\n      }\r\n    });\r\n    questions_ws.on(\"answer_created\", () => {\r\n      questions_ws.emit(\"get_questions_by_session_id\");\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"ask_block\">\r\n      <div className=\"ask_form\">\r\n        {/* <p>{questions_ws.id}</p> */}\r\n        <form className=\"form\" onSubmit={(e) => handleCreateQuestion(e)}>\r\n          <input\r\n            className=\"input\"\r\n            value={question}\r\n            onChange={(e) => {\r\n              setQuestion(e.target.value);\r\n            }}\r\n          />\r\n          <button className=\"ask_button\">Ask</button>\r\n        </form>\r\n      </div>\r\n      <div className=\"ask_select\">\r\n        <select className=\"ask_filter\">\r\n          <option>Filter</option>\r\n          <option>1</option>\r\n          <option>1</option>\r\n          <option>1</option>\r\n        </select>\r\n        <span>Total number of questions: {activeQuestions.length}</span>\r\n      </div>\r\n      <div className=\"asker_questions\">{question_components}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { IQuestion } from \"../../types/questionTypes\";\r\nimport { IAnswer } from \"../../types/answerTypes\";\r\nimport { questions_ws } from \"../../socket\";\r\nimport moment from \"moment\";\r\n\r\ninterface IAnswerFormProps {\r\n  question: IQuestion;\r\n}\r\n\r\nexport const AnswererForm: React.FC<IAnswerFormProps> = ({ question }) => {\r\n  const [status, setStatus] = useState(false);\r\n  const [answerText, setAnswerText] = useState<string>(\"\");\r\n\r\n  const answerBtnStyles = status\r\n    ? \"askme__btn item-group__btn\"\r\n    : \"askme__btn item-group__btn item-group__btn_active\";\r\n  const answerFormStyles = !status\r\n    ? \"item-group__answer-form\"\r\n    : \"item-group__answer-form item-group__answer-form_active\";\r\n\r\n  const setAnswerHandler = () => {\r\n    if (answerText !== \"\" && answerText.length > 3) {\r\n      const answer: IAnswer = {\r\n        question_id: question.id,\r\n        answer_text: answerText,\r\n        answerer_id: 3,\r\n      };\r\n      questions_ws.emit(\"add_answer\", answer);\r\n      setAnswerText(\"\");\r\n    } else {\r\n      alert(\"Answer can not be empty!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    questions_ws.on(\"answer_created\", () => {\r\n      questions_ws.emit(\"get_active_questions\");\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"item-group answer__item-group\" key={question.id}>\r\n      <div className=\"item-group__header\">\r\n        <div className=\"item-group__header-top\">\r\n          <div className=\"item-group__title\">{question.question_text}</div>\r\n          <div className=\"item-group__time\">\r\n            {moment(question.created_at).fromNow()}\r\n          </div>\r\n        </div>\r\n        <div className=\"item-group__header-bottom\">\r\n          Number of answers: {question.answers_list.length}\r\n        </div>\r\n      </div>\r\n      <div className=\"item-group__content\">\r\n        <button\r\n          className={answerBtnStyles}\r\n          onClick={() => setStatus((prev) => !prev)}\r\n        >\r\n          Answer question\r\n        </button>\r\n        <div className={answerFormStyles}>\r\n          <div className=\"input-group input-group_text\">\r\n            <textarea\r\n              id=\"answerText\"\r\n              className=\"item-group__form-input\"\r\n              placeholder=\"Write your answer here\"\r\n              value={answerText}\r\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) => {\r\n                setAnswerText(e.target.value);\r\n              }}\r\n            ></textarea>\r\n            <button\r\n              className=\"askme__btn submit-btn\"\r\n              onClick={setAnswerHandler}\r\n            >\r\n              Answer\r\n            </button>\r\n          </div>\r\n          <div className=\"input-group\">\r\n            <button\r\n              className=\"askme__btn dismiss-btn\"\r\n              onClick={() => {\r\n                setStatus((prev) => !prev);\r\n                setAnswerText(\"\");\r\n              }}\r\n            >\r\n              Dismiss\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { IQuestion } from \"../../types/questionTypes\";\r\nimport { AnswererForm } from \"./AnswerForm\";\r\nimport \"./answerer.css\";\r\nimport { questions_ws, answers_ws } from \"../../socket\";\r\n\r\nexport const Answerer = () => {\r\n  const [formIsActive, setFormIsActive] = useState(false);\r\n  const [activeQuestions, setActiveQuestions] = useState<IQuestion[]>([]);\r\n\r\n  useEffect(() => {\r\n    questions_ws.on(\"connect\", () => {\r\n      questions_ws.send(`User ${questions_ws.id} has connected`);\r\n    });\r\n\r\n    questions_ws.on(\"create_question_success\", () => {\r\n      questions_ws.emit(\"get_active_questions\");\r\n    });\r\n\r\n    questions_ws.on(\"asker_leave\", () => {\r\n      questions_ws.emit(\"get_active_questions\");\r\n    });\r\n\r\n    questions_ws.on(\"success_active_questions\", (resp) => {\r\n      if (resp.status === \"success\") {\r\n        setActiveQuestions(resp.data);\r\n        console.log(resp.data);\r\n      }\r\n    });\r\n\r\n    questions_ws.on(\"question_create_success\", (resp) => {\r\n      questions_ws.emit(\"get_active_questions\");\r\n      console.log(resp);\r\n    });\r\n\r\n    questions_ws.emit(\"get_active_questions\");\r\n    return () => {};\r\n  }, []);\r\n\r\n  const question_components = activeQuestions.map((question) => (\r\n    <AnswererForm question={question} />\r\n  ));\r\n\r\n  return (\r\n    // <div className=\"answer translate-middle shadow-sm p-3 mb-5 bg-body rounded\">\r\n    <div className=\"answer\">\r\n      <div className=\"answer__header\">\r\n        <div className=\"answer_header-row\">\r\n          <div className=\"answer__window-title\">Answerer window</div>\r\n          <div className=\"answer__username\">{questions_ws.id}</div>\r\n        </div>\r\n        <div className=\"answer_header-row\">\r\n          <div className=\"answer__question-count\">\r\n            Active questions: <b>{activeQuestions.length}</b>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"answer__content\">{question_components}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { questions_ws } from \"./socket\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { useBeforeunload } from \"./hooks/useExitPrompt\";\r\nimport { Asker } from \"./components/asker/Asker\";\r\nimport { Answerer } from \"./components/answerer/Answerer\";\r\nimport \"./app.css\";\r\n\r\nexport const App = () => {\r\n  const [page, setPage] = useState(true);\r\n\r\n  useBeforeunload((event) => {\r\n    event.preventDefault();\r\n  });\r\n\r\n  const handlePage = () => {\r\n    setPage(!page);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handlePage}>Change Page</button>\r\n      {page ? <Asker /> : <Answerer />}\r\n    </>\r\n  );\r\n};\r\n","// import { useState, useEffect } from \"react\";\r\n\r\n// const initBeforeUnLoad = (showExitPrompt:boolean) => {\r\n//   window.onbeforeunload = (event:Event) => {\r\n//     if (showExitPrompt) {\r\n//       const e = event || window.event;\r\n//       e.preventDefault();\r\n//       if (e) {\r\n//         e.returnValue = \"\";\r\n//       }\r\n//       return \"\";\r\n//     }\r\n//   };\r\n// };\r\n\r\n// // Hook\r\n// export default function useExitPrompt(bool:boolean) {\r\n//   const [showExitPrompt, setShowExitPrompt] = useState(bool);\r\n\r\n//   window.onload = function () {\r\n//     initBeforeUnLoad(showExitPrompt);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     initBeforeUnLoad(showExitPrompt);\r\n//   }, [showExitPrompt]);\r\n\r\n//   return [showExitPrompt, setShowExitPrompt];\r\n// }\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\ntype BeforeunloadHandler = (evt: BeforeUnloadEvent) => void;\r\n\r\nexport function useBeforeunload(handler: BeforeunloadHandler) {\r\n  const handlerRef = useRef(handler);\r\n\r\n  useEffect(() => {\r\n    handlerRef.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeunload: BeforeunloadHandler = (evt) => {\r\n      let returnValue;\r\n\r\n      if (typeof handlerRef.current === \"function\") {\r\n        returnValue = handlerRef.current(evt);\r\n      }\r\n\r\n      if (evt.defaultPrevented) {\r\n        evt.returnValue = \"\";\r\n      }\r\n\r\n      if (typeof returnValue === \"string\") {\r\n        evt.returnValue = returnValue;\r\n        return returnValue;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"beforeunload\", handleBeforeunload);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeunload);\r\n    };\r\n  }, []);\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}